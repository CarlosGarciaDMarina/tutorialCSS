/*
*   selector {
*        propiedad: valor;
*    }
*
*   *** Tipos de Selectores *****
*   
*   Universal - *
*   de tipo - selecciona por el nombre de la etiqueta del html
*   clases - . + nombre de la clase
*   ID - # + nombre del ID
*   por atributo - [nombre del atributo de la etiqueta = "valor de la etiqueta"]
*   descendiente - etiqueta contenedora + etiqueta que queremos editar
*   pseudo-clases - elemento :hover. (hay mas tipos, por ejemplo: :after, :before)
*/
/*
*   *** ESPECIFICIDAD ***
*   Es la forma en la que podemos cambiar las propiedades sin cambiar las del resto
*   
*   De mayor a menor:
*
*   !important
*   estilos en linea
*   identificadores
*   clases
*   pseudo-clases
*   atributos
*   elementos
*   pseudo-elementos
*/
/*
*   *** METODOLOGÍA ***
*   
*   nombre de la clase + __ + etiqueta + - + etiqueta
*
*       <div class="contact-form">
*           <p class="contact-form__p">
*               <h2 class="contact-form__p-h2"></h2>
*           </p>
*       </div>
*       <div class="subscriber-form">
*           <p class="subscriber-form__p">
*               <h2 class="subscriber-form__p-h2"></h2>
*           </p>
*       </div>
*/
/*
*   *** MEDIDIAS ***
*   Hay 2 uds de medidas: las fijas(todos los dispositivos por igual) y las relativas(para adaptar a todos los tamaños como el del movil o la tablet)
*
*
*   VW = ViewportWidth 100 vw es igual a 100% del ancho
*   VH = ViewportHeight 100 vh es igual a 100% del alto
*
*
*
*
*
*
* 
.contact-form {
    font-size: 25px;
}

.contact-form__h2 {
    font-size: 1em; *relativas serian REM y EM(1 EM sera igual al valor que le demos a la caja contenedora)*
}

*/
/*
.contact-form {
    font-size: 25px;
}

.contact-form__h2 {
    font-size: 2em; /*relativas serian REM y EM(1 EM sera igual al valor que le demos a la caja contenedora)*
    font-family: 'Times New Roman', Times, serif;
    line-height: 1;
    font-weight: 200;
    color: red;
}
*/
/*
*   *** Teoria de las cajas ***
*   Hay dos tipos de cajas las que son en linea y las que son en bloque
*   Las cajas en linea cogen todo el ancho de la seccion 
*   Las cajas en bloque solo lo que ocupan, y no se les puede dar height ni width
*   
*   La propiedad display es una ud que te permite cambiar el comportamiento de las cajas
*   
*   *** PROPIEDADES DE CAJAS ***
*   Son las propiedades que modifican o afectan a las cajas o al contorno o al entorno
*
*   *** JERARQUÍA BOX MODEL ***
*   content, el content se modifica con el line-height.
*   padding, se modifica con padding.
*   border, se modifica con border. El border siempre va a estar por fuera del padding.
*   margin, se modifica con margin. El margin esta por fuera del border.
*
*
*
*
*
*/

* {
    margin: 0;
    padding: 0;
    font-weight: 100;
    font-family: 'Sen', sans-serif;
}

h2 {
    background-color: red;
    display: inline-block;
    padding: 50px;
    box-sizing: border-box;
    text-align: center;
    margin: 10px;
    box-shadow: 
     2px/*eje-x*/ 
     4px/*eje-y*/ 
     15px/*Tamaño del desenfoque*/ 
     0/*cuanto borde*/ 
    black /*color sombra*/;
    text-shadow: 
     2px 2px 2px #fff, 
     2px 2px 2px #fff;
    transform: rotate(-45deg);
}

h3 {
    font-size: 40px;
    margin: auto;
    padding: auto;
    text-align: center;
    
}

.posiciones div{
    width: 120px;
    height: 120px;
}

.caja1 {
    background: orange;


}
 
.caja2 {
    background: green;
    position: relative;
}

.caja3 {
    background: lightblue;

}

.caja4 {
    background: yellow;

}


/*
*       ***POSITION Y DISPLAY***
*
*   *** Position modifica la interaccion entre las cajas
*
*
*
*
*
*
*
*
*       Z-INDEX
*   SOLO EN ELEMENTOS POSICIONADOS Y PUEDE OCASIONAR CONFLICTOS DE HIJOS PADRES
* 
*   *** Display modifica el comportamiento de las cajas
*
*   BLOCK - Elementos que ocupan todo el bloque
*   INLINE - Elemento que ocupa solo lo que el contenido tiene dentro, no se puede modif ni ancho ni alto
*
*   INLINE-BLOCK
*
*   GRID -  
*   FLEX - 
*
*   INLINE-FLEX
*   INLINE-GRID
*
*
*   TABLE - DESUSO
*   INLINE-TABLE - DESUSO
*   LIST-ITEM - DESUSO
*   TABLE-CELL - DESUSO
*   TABLE-ROW - DESUSO
*   TABLE-COLUMN - DESUSO
*
*/

.display div{
    width: 150px;
    height: 150px;
    margin: 20px;
    border: 10px solid orangered;
    background: yellow;
    display: inline-block;
}

/*
*       ***OVERFLOW***
*   Es lo que sobresale del bloque, la prop por defecto es inherit
*   auto: detecta que en caso del contenido sobrepase la caja, hace una barrita de scroll y te permite scrolear dntro
*   scroll: pone la barra scroll aunque no sea necesaria
*   hidden:
*
*   Overflow-x overflow horizontal 
*   Overflow-y overflow vertical
*/
/*
*       ***FLOAT***
*   Es lo que sobresale del bloque, la prop por defecto es inherit
*   auto: detecta que en caso del contenido sobrepase la caja, hace una barrita de scroll y te permite scrolear dntro
*   scroll: pone la barra scroll aunque no sea necesaria
*   hidden:
*
*   Overflow-x overflow horizontal 
*   Overflow-y overflow vertical
*
*
*/

.float {
    margin: auto;
    margin-top: 50px;
    border: 4px solid red;
    background: lightblue;
    width: 50%;
    padding: 20px;
}

.float img {
    float: right;
    height: 400px;
    margin: 10px;
}

/*
*       ***PSEUDO-ELEMENTOS***
*   
*   ::first-line    | block
*   ::first-letter  | block
*   ::placeholder   
*   ::after         || HIJOS -CONTENT (NECESARIO) - INLINE
*   ::before         || HIJOS -CONTENT (NECESARIO) - INLINE
*   ::selection         || HIJOS -CONTENT (NECESARIO) - INLINE
*
*
*/

.texto {
    padding: 20px;
}

.texto::first-line {
    color: blue;
    font-size: 20px;
}

.texto::first-letter {
    font-size: 40px;
}

/*
*       ***PSEUDO-CLASES***
*   :hover      - cuando el raton se pone encima del elemento
*   :link       - Cuando no has visitado un enlace
*   :visited    - Cuando ya has visitado un enlace
*   :active     - Cuando hacemos clic y lo mantenemos en algun elemento
*   :focus      - Cuando esta enfocado en un elemento
*   :lang       - Se refiere al lenguaje, es como una funcion donde se le mete un parametro(el lenguaje) 
*
*/

/*
*       ***OBJECT FIT:FIL***
*   Contain     - Hace que las resoluciones se ajusten al contenido
*   Cover       - La imagen se extiende a todo el contenido
*   None        - Usa las propiedades por defectos
*   Scaler-down - Se queda con la mejor propiedad entre contain y none
*
*       ***OBJECT POSITION***
*   Left     - Posiciona la imagen hacia la izda
*   Right    - Posiciona la imagen hacia la dcha
*   Bottom   - Posiciona la imagen hacia abajo
*   Top      - Posiciona la imagen hacia arriba
*/

/*
*       ***CURSOR***
*   Cambia el cursor cuando esta encima de un elemento
*   https://www.w3schools.com/cssref/pr_class_cursor.php
*
*
*/

/*
*   ***RESPONSIVE DESIGN***
*   Se trata de adaptar una web a distintas resoluciones (pc, tablet y movil)
*   Lo trabajare en otro index que voy a hacer aparte de este
*
*
*
*
*
*
*/

/*
*   ***FLEXBOX***
*   
*   Es una forma de maketar webs
*
*   Flex requiere de flex container y un flex item
*   flex container contiene los items del flex item
*   flex container se comporta como un bloque 
*   cross axis - eje y - se divide en cross start y cross end, funciona top to bottom
*   main axis - eje x - se divide en main start y main end, funciona left to rigth
*   solo los hijos heredan el flex del padre, los nietos NO
*
*   flex direction nos permite cambar la direcion del main y cross axis
*   flex-wrap mantiene la integridad del contenido por ejemplo en una linea de 6 cajas, si disminuimos el tamaño mantiene el contenido
+       empujando las cajas a la fila de abajo
*   flex-flow: flex direction + flex wrap;
*   justify-content: pone el contenido en el centro (main axis)
*       space-around: deja la mayor cantidad de spacio entre las cajas
*       space-between: da margen auto a todas las cajas
*       space-evenly: da un margin especifico para que cada caja tenga exactamente el mismo 
*   align-items: pone el contenido en el centro (cross axis)
*   align-self: propiedad con la que damos forma a los items (cros axis)
*       flex-start: pone al principio del contenido y no se estira a lo largo del cross axis
*       center: se centra verticalmente
*       flex-end: pone al final del contenido
*       baseline: ajustas lios items ajustando los margenes de abajo del contenido hacia arriba
*       stretch: se estiran los items ocupando todo el alto de la caja
*   align-content: se utiliza para cuando hay varias columnas y lo ajusta a como tengamos la opcion de align-items
*
*   margin-(direction)
*   
*   flex-grow: (espacio asignado + sobrante / grows) (Main axis)
*   flex-shrink: espacio que cede (Main axis)
*   flex-basis: medicion antes de encogerse (en auto(defect value) agarra el width y, si no, tiene mas propiedad) (Main axis)
*   flex: flex-grow, flex-shrink, flex-basis (al menos el primer parametro es obligatorio)
*   Order: (Como el Z index, pero en el eje en el que apunta el main axis) ordena de izda a dcha
*
*/

.flex-container {
    display: flex;
    align-items: center;
    flex-wrap: wrap;
    justify-content: center;
    background: #333;
    margin: 50px 50px;
    padding: 20px;
    border: 8px solid transparent;
    outline: 4px solid white;
}

.form {
    min-width: 400px;
    flex: 1;
    text-align: center;
    padding: 30px;
    order:5;
}

.form__input{
    width: 100%;
    padding: 7px;
    margin: 6px 0;
    border: none;
    border-bottom: 3px solid #1c7;
    background: transparent;
    color: #fff;
}

.form__input:focus {
    background: linear-gradient(to bottom, transparent, #222);
    outline: none;
    border-bottom: 3px solid #5f9;
}

.form textarea{
    min-height: 140px;
    resize: none;
}

.form-img {
    flex: 1;
    padding: 10px;
    display: flex;
    min-width: 150px;
    max-width: 300px;
    order: 2;
}

.form-img div{
    padding: 10px;
}

.img-container {
    margin: auto;
}

.img-container div {
    text-align: center;
    border-radius: 50%;
    background-color: #fff;
}

.form-img img {
    width: 80%;
    margin: auto; 

}

.form input[type="submit"] {
    background-color: #094;
    border-bottom: none;
    padding: 12px;

}

.form input[type="submit"]:hover {
    background-color: #072;
    border-bottom: none;
    padding: 12px;

}

.form input[type="submit"]:focus {
    background-color: #094;

}

.form input[type="submit"]:active {
    background: linear-gradient(to bottom, #072, #050);

}

/*
*    **********GRID***********
*   Es una forma de trabajar con layout y es un valor de display, se refiere a rejilla
*
*   Grid container - Son los padres de los grid items (elementos)
*   Grid item - Son los hijos de los grid container (padres de los elementos)
*   Grid Cell - Son cada una de las divisiones del grid (cada rejilla)
*   Grid Tracks (column and Row) - las filas y las columnas en los que se divide el grid
*   Grid Area - Son las areas que seleccionamos dentro del grid, deben ser consecutivas
*   Grid Line (Column line and Row line) - las lineas totales que dividen todo el grid al completo
*   
*   ---------Propiedades-------
*   Grid-template-rows (grid-container)     -
*   Grid-template-columns (grid container)  -
*
*   Grid-row-gap (grid container)           -
*   Grid-column-gap (grid container)        -
*   Grid-gap: row column (grid container)   -
*
*   Grid-row-start (grid-item)
*   Grid-row-end (grid-item)
*   Grid-columns-start (grid-item)
*   Grid-columns-end (grid-item)
*   Grid-row ((grid-row-start) / span(identifica por filas) (grid-row-end)) (grid-item) ******************
*   Grid-column ((grid-column-start) / span(identifica por columnas) (grid-column-end)) (grid-item) ******
*
*   unidades "auto" y fr(FlexRow)
*   repeat(cantidad,tamaño/s)
*
*   ----------- Grid implicito y explicito ----------
*
*   3 nuevas propiedes del grid implicito
*   grid-auto-rows (igual que el template)
*   grid-auto-columns (igual que el template)
*   grid-auto-flow:Row(default), Column y Dense
*
*
*   ----------- Grid dinámico -----------------------
*
*   Estructuras autoajustables   
*
*   min-max()
*   min-content
*   max-content
*
*   cantidad
*
*   auto-fill
*   auto-fit
*
*
*   -------- ALINEACION Y CONTROL DE FLUJO ---------
*
*   diferencia con flex: 
*   La alineacion es dentro de cada celda y no alineacion total del flex container
*   Cada celda seria un flex container
*
*   stretch(default) - start - center -end
*   place-items: align-items , justify-items
*
*   -------- ALINEACION DE FILAS Y COLUMNAS ---------
*
*   justify-content (horizontalmente)
*   align-content (verticalmente)
*   stretch(default) - start - center -end*
*   mas las de flex:
*                   *space-around
*                   *space-between
*                   *space-evenly
*
*   ----------APLICADO AL GRID ITEM ----------
*   align-self
*   justify-self
*   place-self: align-self , justify-self
*
*   stretch(default) - start - center -end
*   order (igual que en flex)
*
*/

.grid-container {
    display: grid;
    grid-template-rows: repeat(5, 150px); /* repeat(nº de filas, unidad de medida (px, em, ...) */
    grid-template-columns: repeat(3, 150px); /* repeat(nº de columnas, unidad de medida (px, em, ...) */
    justify-content: center;
    grid-gap: 10px; /* Espacio entre cada celda */
    background-color: #666;
    margin: 10px;
    padding: 10px;
    grid-auto-flow: dense; /* Rellena los campos que van a quedarse vacios */
    grid-auto-rows: 1fr; /* Las filas que van a crear automaticamente */
    grid-auto-columns: 1fr; /* Las columnas que van a crear automaticamente */
}

.grid-item {
    border: 4px solid #000;
    background-color: #fff;
}

.grid-item:first-child {
    grid-column: 1 / span 2;
    grid-row: 1 / span 2;
    background-color: orangered;
}

.grid-item:nth-child(2) {
    grid-row: 1 / span 2;
    background-color: aqua;
}

.grid-item:nth-child(9) {
    grid-row: 5;
    grid-column: 1 / span 3;
    background-color: salmon;
}

.grid-container-d {
    display: grid;
    grid-template-rows: repeat(auto-fill, 150px); /* repeat(nº de filas, unidad de medida (px, em, ...) */
    grid-template-columns: repeat(3, minmax(100px,200px)); /* repeat(nº de columnas, unidad de medida (px, em, ...) */
    justify-content: center;
    grid-gap: 10px; /* Espacio entre cada celda */
    background-color: #666;
    margin: 10px;
    padding: 10px;
    grid-auto-flow: dense; /* Rellena los campos que van a quedarse vacios */
    grid-auto-rows: 1fr; /* Las filas que van a crear automaticamente */
    grid-auto-columns: 1fr; /* Las columnas que van a crear automaticamente */
    

}

.grid-item-d {
    border: 4px solid #000;
    background-color: #fff;

}

.grid-container-a {
    display: grid;
    background: #444;
    margin: 10px;
    grid-template-areas: 
     "header header header"
     "aside main main"
     "aside main main"
     "aside main main"
     "aside main main"
     "aside main main"
     "aside main main"
     "footer footer footer";
    grid-template-rows: repeat(auto-fill,1fr);
    height: 92vh;
    border: 5px solid black;
}
.grid-item-a {
    padding: 20px;
}

.grid-header ul li {
    display: inline-block;
}

.grid-header {
    background: #f96;
    grid-area: header;

}

.grid-main {
    background: #96f;
    grid-area: main;

}

.grid-aside {
    background: #888;
    grid-area: aside;
}

.grid-footer {
    background: #6f9;
    grid-area: footer;
}

/*
*   *********TRANSITION**********
*
*   transition-property: property/ies - all - none
*   transition-duration: duration/s
*   transition-delay: delay/s
*   transition-timing-function: linear | ease | ease-in | ease-out | ease-in-out | step-start | step-end | steps(int, start|end) | initial | inherit;
*   transition
*
* 
*
*  
*
*   
*/

.container-transition {
    background: #86f;
    padding: 20px 5px;
}

.caja-transition{
    margin: 40px;
    height: 100px;
    background: #025;
    width: 100px;
    transition-property: background;
    transition-duration: 1s;
    position: relative;
}

.caja-transition:hover {
    background: #6f9;
}

.caja-transition:first-child {
    transition-timing-function: linear;
}

.caja-transition:nth-child(2) {
    transition-timing-function: ease;

}
.caja-transition:nth-child(3) {
    transition-timing-function: ease-in;

}
.caja-transition:nth-child(4) {
    transition-timing-function: ease-out;

}
.caja-transition:nth-child(5) {
    transition-timing-function: ease-in-out;

}

/* 
*   *********ANIMATION**********
*   
*   @keyframes
*   
*
*
*
*
*
*
*
*
*
*
*
*
*
*/

.container-animation {
    background: #86f;
    padding: 20px 5px;
}

.caja-animation{
    background: #025;
    margin: 40px;
    height: 100px;
    width: 100px;
    animation-name: desplazarse;
    animation-duration: 3s;
    position:relative;
    animation-iteration-count: 1;
    animation-direction: alternate;
    animation-fill-mode: forwards; /* forwards: se queda como finaliza*/
    animation-timing-function: cubic-bezier();

}

@keyframes desplazarse {
    /*Tenemos 2 formas de hacer animaciones: con from-to y con porcentajes*/
    /*from-to*/
    /*
    from {
        position: relative;
        left: 0;
    } 
    to {
        left: 80%;
    }
    */
    /*Con porcentajes */
    
        0% {
        position: relative;
        left: 0;
        } 
        50%{
        background: green;
            
        }
        100% {
        left: 80%;
        background: red;
        }    
    
}

/*cubic beizier*/
/*
* https://cubic-bezier.com/#.17,.67,.83,.67
*/

/* 
*   *********TRANSFORM**********
*
*   Nos permite transformar el objeto en varias formas
*
*   transform: translateX(x) - translateY(y) translate(x - x,y) (si usamos % son relativos al elemento) - recomendado para animar
*   transform: scale(xy - x,y) scaleX(x) - scaleY(y)
*   transform: rotate(angleUnit) - rotateX(angleUnit) - rotateZ(angleUnit) - rotate3D(angleUnit) || angleUnit = deg - grad - rad - turn
*   transform: skew(angleUnit)
*   https://www.w3schools.com/cssref/css3_pr_transform.php
*
*   clip-path: https://bennettfeely.com/clippy/
*  
*/

.container-transform {
    background: #86f;
    padding: 20px 5px;
}

.caja-transform {
    background: #025;
    margin: 40px;
    height: 100px;
    width: 100px;
    display: flex;
    color: #fff;
    transform: skew(45deg);
}

.b-transform {
    margin: auto;
    transform: skew(-45deg);
}

/* 
*   *********BACKGROUND**********
*
*   background-attachment: scroll | fixed | inherit
*   background-clip: border-box | padding-box |content-box
*   background-origin - origen de la foto
*  
*/

.container-back {
    background: #86f;
    padding: 20px 5px;
    border: 2px solid #f00;
    width: 400px;
    height: 400px;
    margin: 40px;
    background-image: url(https://upload.wikimedia.org/wikipedia/commons/7/73/Lion_waiting_in_Namibia.jpg);
    background-size: cover;
    background-repeat: no-repeat;
    background-clip: border-box;
}

/*
*   **********VARIABLES**********
*
*   Las variables son espacios que se almacenan en memoria
*
*   --varName
*   
*   var()
*
*
*
*
*
*
*
*
*/

:root {
    --color-rojo: #ff0000
}

.container-var {
    margin: 15px;
    padding: 30px;
    width: 150px;
    height: 150px;
    background: #094;
}

.container-var2 {
    margin: 15px;
    padding: 30px;
    width: 150px;
    height: 150px;
    background: var(--color-rojo)
}

/*
*   **********Filter**********
*
*   
*
*   none
*   blur(px) (desenfoque)
*   brightness (0-1)
*   contrast(number or %)
*   grayscale(%)
*   hue-rotate(deg) 
*   invert(%) invertir los colores
*   opacity(%)
*   saturate(%)
*   sepia(%)
*   url("filters.svg#filter-id");
*
*
*/

.container-filter {
    margin: 15px;
    padding: 30px;
    filter: contrast(30);
    background-color: #fff;
}

.container-filter img {
    height: 500px;
}

.caja-fil {
    display: inline-block;
    width: 150px;
    height: 150px;
    background: #ff0000;
    margin: 40px;
    border-radius: 50%;
    filter: blur(20px);

}

.caja-fil:first-child{
    animation: trasladar 2s alternate infinite;

}

@keyframes trasladar{
    0%{
        transform: translate(0);
    } 
    100% {
        transform: translate(160px);

    }
}

/*
*   **********OTHER PROPERTIES**********
*
*   Direction: ltr | rtl | initial | inherit;
*   letter Spacing
*   Scroll-behavior MUY INTERESANTE
*   user-selected
*   text-shadow
*    
*   
*   ------ atter() ------
*   
*   SELECTORES: https://www.w3schools.com/cssref/css_selectors.php
*
*/

* {
    scroll-behavior: smooth;

}

.container-scroll img {
    height: 550px;
    margin: 50px;
}